package com.amx.jax.proto.tpc.models;

import java.math.BigDecimal;
import java.util.Map;

import com.amx.jax.dict.Currency;
import com.amx.jax.swagger.ApiMockModelProperty;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

public class RemittenceModels {

	private static interface TPCPaymentReference {
		@ApiMockModelProperty(example = "CAPTURED", value = "Payment Status", required = true)
		public PaymentStatus getPaymentStatus();

		@ApiMockModelProperty(
				value = "TPC Transaction/Payment Reference",
				notes = "This is reference id should be generated by client and should be part of response for record reference",
				example = "ABCF67783643403", required = true, position = 0)
		public String getPaymntReference();
	}

	private static interface RemitApplicationDetails {

		@ApiMockModelProperty(
				value = "Application Id",
				notes = "This is confirmation of rate customer will get and will have validity of 10 min",
				example = "67783643403", required = true, position = 0)
		public BigDecimal getApplicationId();
	}

	private static interface RemitTranxStatus extends RemitApplicationDetails {

		@ApiMockModelProperty(value = "Transaction Id",
				notes = "Transaction Id : will be present only if, payment is done and application has been converted into transaction",
				example = "TR232323902323", required = true)
		public BigDecimal getTransactionId();

		@ApiMockModelProperty(example = "PAIDC", value = "Transaction Status", required = true)
		public TranxStatus getTranxStatus();

	}

	/**********************
	 * 
	 * Remittance Models
	 * 
	 ***********************/

	public static class RemitInquiryRequest {

		@ApiMockModelProperty(example = "1234", required = true)
		public BigDecimal beneId;

		@ApiMockModelProperty(example = "100", required = true)
		public Float domAmount;

		@ApiMockModelProperty(example = "BHD", required = true)
		public Currency domCur;

		@ApiMockModelProperty(example = "INR", required = true)
		public Currency forCur;

		@ApiMockModelProperty(example = "SALARY", required = true)
		public String source;

	}

	public static class RemitInquiryResponse extends RemitInquiryRequest {

		@ApiMockModelProperty(example = "23500", required = true)
		public Float forAmount;

		@ApiMockModelProperty(example = "0.0054", required = true)
		public Float rate;

	}

	public static class RemitConfirmPaymentRequest extends RemitInquiryResponse {

		@ApiMockModelProperty(value = "Flex Fields to be passed")
		private Map<String, Object> flexFields;

		@ApiMockModelProperty(value = "Additional Fields to be passed")
		private Map<String, Object> additionalFields;

		@ApiMockModelProperty(example = "INVEST_LOANS", required = true)
		public String purpose;
	}

	@JsonDeserialize(as = RemittenceDTO.class)
	@JsonIgnoreProperties(ignoreUnknown = true)
	public static interface RemitConfirmPaymentResponse extends RemitTranxStatus {
	}

	@JsonDeserialize(as = RemittenceDTO.class)
	@JsonIgnoreProperties(ignoreUnknown = true)
	public static interface RemitVerifyRequest extends RemitApplicationDetails {
	}

	@JsonDeserialize(as = RemittenceDTO.class)
	@JsonIgnoreProperties(ignoreUnknown = true)
	public static interface RemitVerifyResponse extends TPCPaymentReference {

	}

	public static enum PaymentStatus {
		CAPTURED, PENDING, CANCELED, VOIDED
	}

	public static enum TranxStatus {
		INITIATED, CONFIRMED, CANCELLED,
		/**
		 * Rejected by AMX
		 */
		REJECTED,
		/**
		 * Payment is done by customer
		 */
		PAIDC,

		/**
		 * Payment is done to beneficiary
		 */
		PAIDB

	}

	public static class RemittenceDTO implements RemitVerifyResponse, RemitVerifyRequest, RemitConfirmPaymentResponse {

		@Override
		public BigDecimal getApplicationId() {
			return null;
		}

		@Override
		public BigDecimal getTransactionId() {
			return null;
		}

		@Override
		public TranxStatus getTranxStatus() {
			return null;
		}

		@Override
		public PaymentStatus getPaymentStatus() {
			return null;
		}

		@Override
		public String getPaymntReference() {
			return null;
		}
	}

}
